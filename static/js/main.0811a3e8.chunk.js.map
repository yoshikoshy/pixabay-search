{"version":3,"sources":["components/ImageCard.js","components/ImageSearch.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","image","tags","split","className","src","webformatURL","alt","href","pageURL","target","rel","user","views","downloads","likes","map","tag","index","key","ImageSearch","searchText","useState","text","setText","onSubmit","e","preventDefault","action","onChange","value","type","placeholder","HeaderPage","FooterPage","App","images","setImages","isLoading","setIsLoading","term","setTerm","useEffect","fetch","process","then","res","json","data","hits","catch","err","console","log","Header","length","id","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0811a3e8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ImageCard = ({image}) => {\r\n\r\n  const tags = image.tags.split(','); //split by the comma\r\n    return (\r\n        <div className=\"max-w-sm rounded overflow-hidden shadow-lg\">\r\n        <img src={image.webformatURL} alt=\"\" className=\"w-full\"></img>\r\n        <div className=\"px-6 py-4\">\r\n          <div className=\"font-bold text-purple-500 text-xl mb-2\">\r\n            <a href={image.pageURL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"href\">Photo by {image.user}</a>\r\n          </div>\r\n          <ul>\r\n            <li>\r\n              <strong>Views: </strong>{image.views}\r\n            </li>\r\n            <li>\r\n              <strong>Downloads: </strong>{image.downloads}\r\n            </li>\r\n            <li>\r\n              <strong>Likes: </strong>{image.likes}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"px-6 py-4\">\r\n          {tags.map((tag, index) => (\r\n            <span key={index} className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">\r\n            #{tag}\r\n          </span>\r\n          ))}\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ImageCard;\r\n","import React, {useState} from 'react';\r\n\r\nconst ImageSearch = ({searchText}) => {\r\n    const [text, setText] = useState('');\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        searchText(text);\r\n    }\r\n\r\n    return (\r\n        <div className=\"max-w-sm rounded overflow-hidden my-10 mx-auto\">\r\n            <form onSubmit={onSubmit} action=\"\" className=\"w-full max-w-sm\">\r\n                <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\r\n                    <input onChange={e => setText(e.target.value)} type=\"text\" className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\" placeholder=\"Search Image Term...\"/>\r\n                    <button className=\"flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded\" type=\"submit\">\r\n                        Search\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageSearch;\r\n","import React from \"react\";\r\n\r\nconst HeaderPage = () => {\r\n    return (\r\n        <nav className=\"font-sans flex flex-col text-center content-center sm:flex-row sm:text-left sm:justify-between py-2 px-6 bg-white shadow sm:items-baseline w-full\">\r\n        <div className=\"mb-2 sm:mb-0 inner\">\r\n      \r\n          <a href=\"/home\" className=\"text-2xl no-underline text-grey-darkest hover:text-blue-dark font-sans font-bold\">Sean's Pixabay</a><br/>\r\n          <span className=\"text-xs text-grey-dark\">Utilizing Pixabay API to search for images</span>\r\n      \r\n        </div>\r\n      \r\n        <div className=\"sm:mb-0 self-center\">\r\n          <a href=\"https://www.github.com/yoshikoshy\" className=\"text-md no-underline text-grey-darker hover:text-blue-dark ml-2 px-1\">GitHub</a>\r\n          <a href=\"https://www.linkedin.com/in/sean-koshy-5925b725/\" className=\"text-md no-underline text-grey-darker hover:text-blue-dark ml-2 px-1\">LinkedIn</a>\r\n      \r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\nexport default HeaderPage;","import React from \"react\";\r\n\r\nconst FooterPage = () => {\r\n  return (\r\n    <footer className=\"footer bg-white relative pt-1 border-b-2 border-blue-700\">\r\n      <div className=\"container mx-auto px-6\">\r\n          <div className=\"mt-16 border-t-2 border-gray-300 flex flex-col items-center\">\r\n              <div className=\"sm:w-2/3 text-center py-6\">\r\n                  <p className=\"text-sm text-blue-700 font-bold mb-2\">\r\n                      Â© 2020 by Sean Koshy\r\n                  </p>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </footer>\r\n  );\r\n}\r\n\r\nexport default FooterPage;","import React, {useState, useEffect} from 'react';\nimport ImageCard from './components/ImageCard';\nimport ImageSearch from './components/ImageSearch';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [term, setTerm] = useState('');\n\n  useEffect(() => {\n    fetch(`https://pixabay.com/api/?key=${process.env.REACT_APP_PIXABAY_API_KEY}&q=${term}&image_type=photo`)\n    .then(res => res.json())\n    .then(data => {\n      setImages(data.hits);\n      setIsLoading(false);  //set to false after getting data\n    })\n    .catch(err => console.log(err));\n  }, [term]);  //add term as a dependency for whenever it changes, to run again\n\n  return (\n    <div className=\"container mx-auto\">\n      <Header />\n      <ImageSearch searchText={(text) => setTerm(text)}/>\n\n      {!isLoading && images.length === 0 && <h1 className=\"text-5xl text-center mx-auto mt-32\">No Images Found</h1>}\n\n      {isLoading ? <h1 className=\"text-6xl text-center mx-auto mt-32\">Loading...</h1> : <div className=\"grid grid-cols-4 gap-3\">\n        {images.map(image => \n          <ImageCard key={image.id} image={image}/>\n        )}\n      </div>}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}